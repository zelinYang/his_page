<!DOCTYPE html>
<html>
<head>
    <title>${SessionSysPortal.appTitle}-字典选择树</title>
    #parse("./common/pageCss.vm")
    #parse("./common/pageJs.vm")
    <link href="../resource/layuiadmin/modules/ztree/css/zTreeStyle/zTreeStyle.css" rel="stylesheet">
    <style type="text/css">

        .tree {
            height: calc(100vh - 90px);
            overflow-y: auto;
            overflow-x: auto;
        }

        .layui-card-header .caller-seach {
            display: inline-block;
            width: calc(100% - 80px);
        }

        .layui-card-header .caller-seach i.layui-icon {
            right: 130px;
        }

        .layui-card-header .layui-btn-group i.layui-icon {
            position: initial;
            line-height: inherit;
        }

        .layui-card-header .layui-btn-group {
            float: right;
        }
    </style>
</head>
<body>
<div class="layui-content-wrapper">
    <div class="layui-fluid">
        <div class="layui-card">
            <div class="layui-card-header">
                <div class="layui-form caller-seach" action="">
                    <input type="text" id="q_keyWord" autocomplete="off" class="layui-input caller-pl32"
                           autofocus="autofocus">
                </div>
                <div class="layui-btn-group">
                    <button id="btn_query" class="layui-btn layui-btn-sm" type="button" lay-tips="查询"><i
                            class="layui-icon layui-icon-search "></i></button>
                    <button id="btn_clean" class="layui-btn layui-btn-sm " type="button" lay-tips="清 空">
                        <i class="iconfont icon-qingchu"></i></button>
                </div>
            </div>
            <div class="layui-card-body tree">
                <ul id="basDicTree" class="ztree"></ul>
            </div>
        </div>
        <div class="tool-bottom-fixed">
            <button type="button" id="btn_select" class="layui-btn layui-btn-sm">确认
            </button>
            <button type="button" id="btn_close" class="layui-btn layui-btn-sm">
                关闭
            </button>
        </div>
    </div>
</div>
<!-- 本页面js -->
<script src="../resource/layuiadmin/modules/ztree/js/jquery.ztree.all.min.js"></script>
<script>
    var dicTypeIds = "$!{dicTypeIds}";

    var DIC_TYPE_TREE = "$!{CONST.AppConstants.DIC_TYPE_TREE}";
    window.jsonpCallback = function (jsonpCallback) {
        window.jsonpCallback = jsonpCallback;
    }
    layui.config({
        base: '../resource/layuiadmin/'
    }).extend({
        index: 'lib/index'
    }).use(['index'], function () {
        var $ = layui.$;

        //回车触发查询
        $("#q_keyWord").keydown(function (event) {
            if (event.keyCode == 13) {
                $('#btn_query').click();
                return false;
            }
        });

        // 查询按钮
        $('#btn_query').click(function () {
            var keyWord = $("#q_keyWord").val();
            refreshRootNode(keyWord);
        })

        // 清空按钮
        $('#btn_clean').click(function () {
            $("#q_keyWord").val("");
        })

        /**
         * 刷新根结点树
         */
        window.refreshRootNode = function (keyWord) {
            var nodes = zTreeObj.getNodes();
            zTreeObj.setting.async.otherParam.keyWord = keyWord;
            zTreeObj.setting.async.otherParam.treeChildNodes = !keyWord;
            $.each(nodes, function (i, node) {
                if (keyWord) {
                    zTreeObj.selectNode(node, true);
                    refreshNode({type: "refresh", silent: false});
                } else {
                    zTreeObj.removeChildNodes(node);
                    node.zAsync = false;
                    node.isParent = true;
                    zTreeObj.updateNode(node);
                }
            })
            zTreeObj.cancelSelectedNode(); //取消所有选中
        }

        //刷新子节点
        function refreshNode(data) {
            var type = data.type,
                silent = data.silent,
                nodes = zTreeObj.getSelectedNodes();
            if (nodes.length == 0) {
                alert("请先选择一个父节点");
            }
            for (var i = 0, l = nodes.length; i < l; i++) {
                zTreeObj.reAsyncChildNodes(nodes[i], type, silent);
                if (!silent) zTreeObj.selectNode(nodes[i]);
            }
        }

        // 初始化树形分类
        var zTreeObj, setting = {
            view: {
                selectedMulti: false,
                showIcon: false
            },
            data: {
                simpleData: {
                    enable: true
                }
            },
            async: {
                enable: true,
                url: '../basDic/basDicListData.jo?pageSize=99999&validFlag=1',
                otherParam: {"treeChildNodes": true, dicTypeIds: dicTypeIds},
                autoParam: ["dicTypeId", "treeSort=treeNodeCode"],
                dataFilter: function (treeId, parentNode, result) {
                    var childNodes = result.data;
                    if (!childNodes) return null;
                    $.each(childNodes, function (index, item) {
                        //判断是否是最大级别的最大长度
                        item.name = item.dicName + ' ' + item.dicCode;
                        item.isParent = true;
                    })
                    return childNodes;
                }
            },
            callback: {
                onAsyncSuccess: function (event, treeId, treeNode, msg) {
                    if (!(!!window.ActiveXObject || 'ActiveXObject' in window)) { // 非ie
                        zTreeObj.expandNode(treeNode, true, false, true, false) //只展开第一个节点
                    }
                    zTreeObj.setting.async.otherParam['includeRoot'] = false
                },
                onDblClick: function (event, treeId, treeNode) {
                    $("#btn_select").click();
                }
            }
        }

        //初始化字典分类名称 请求参数
        var basDicTypeOption = {
            url: contextPath + '/basDicType/basDicTypeListData.jo?validFlag=1',
            data: {
                dicTypeIds: dicTypeIds,
                dicType: DIC_TYPE_TREE
            },
            success: function (result) {
                var data = result.data;
                if (data && data.length > 0) {
                    $.each(data, function (index, item) {
                        item.name = item.dicTypeName;
                        item.isParent = true;
                    })
                    //根节点
                    var zNodes = data;
                    zTreeObj = $.fn.zTree.init($('#basDicTree'), setting, zNodes);
                }
            }
        }
        common.requestServer(basDicTypeOption.url, basDicTypeOption.data, basDicTypeOption.success);

        $("#btn_select").click(function () {
            var nodes = zTreeObj.getSelectedNodes();
            var treeNode = nodes[0];
            if (nodes.length == 0) {
                common.msg("请先选择一个子节点", 0);
            } else if (treeNode.level == 0) {
                common.msg("不能选择根节点", 0);
                zTreeObj.cancelSelectedNode(); //取消所有选中
            } else {
                window.jsonpCallback(treeNode);
                $("#btn_close").click();
            }
        })

        $("#btn_close").click(function () {
            // 关闭窗口
            var index = parent.layer.getFrameIndex(window.name);
            parent.layer.close(index);
        })
    })
</script>
</body>
</html>